From 1ad0591519ace679de169c12e09d556a46f9e42b Mon Sep 17 00:00:00 2001
From: Kevin McGinn <kmcginn14@gmail.com>
Date: Tue, 17 Dec 2013 01:15:57 -0500
Subject: [PATCH 04/13] v1 - fixed small compilation errors, added development
 notebook

---
 incr_change/dev_notebook.txt | 68 ++++++++++++++++++++++++++++++++++++++++++++
 tinyftp/connections.c        |  5 ++--
 2 files changed, 71 insertions(+), 2 deletions(-)
 create mode 100644 incr_change/dev_notebook.txt

diff --git a/incr_change/dev_notebook.txt b/incr_change/dev_notebook.txt
new file mode 100644
index 0000000..3452a53
--- /dev/null
+++ b/incr_change/dev_notebook.txt
@@ -0,0 +1,68 @@
+12/16/2013
+
+added documentation files to Git repository
+compiled tinyftp successfully
+ran tinyftp with: tinyftp -s 127.0.0.1 -p 9909 -c .
+this started a server on the localhost at port 9909
+
+used PuTTY to get a new console, ran filezilla from: 
+/compile/src/interface/filezilla
+connected to 127.0.0.1 port 9909 from the quick connect bar
+successfully connects to the server!
+calls the "list" command to return the files in the current directory
+
+noticed that the bottom of Filezilla has a tab for failed transfers with a
+reason column - should add failed uploads/downloads from bad checksums to that
+
+STARTING V1
+based on work done in class, looked in tinyftp's connections.c for where the 
+various FTP commands are implemented
+found case statements around line 323 in interract function
+noticed CMD_LIST and other constants defined
+found enum for commands in cmdparser.h, added CMD_ZCHK
+
+noticed that I need to return CMD_ZCHK from parse_input() located in cmdparser.h
+added case statement based on pattern to return CMD_ZCHK when user input is ZCHK
+
+went back to interract, added case for CMD_ZCHK based on pattern of others
+
+looked at LIST command to see how it works - seems like you need to create client_fd
+from make_client_connection(conn_fd, client_port, client_addr) to be able to write
+responses to the client?
+looked at the write_list function that it calls - it's defined in fileutils.c
+has lots of checks to see if sock!=client_sock
+conn_fd and client_port seem to be sockets
+
+should probably create a function like write_checksum that takes in conn_fd, client_fd,
+and then the file that it is trying to check
+that function should handle the network stuff, and call another function which actually
+returns the md5 checksum string of the inputted file - that can be a dummy for now
+message that is sent to the client seems to usually be put in a char array
+
+look at how delete_file is called in connections.c to see how you get a filename
+filename just seems to be in the data_buff! - need to check that buffer for errors
+
+added error checking of data_buff in interract's CMD_ZCHK case to make sure that it is not 
+null, has a string of non-zero length, and does not start with a null character
+
+note: when adding new functions, should add their prototypes to defines.h
+
+use send_repl_client(client_sock, line) to send the message to the client
+
+added retrieving the client socket and then calling the write_chksum function
+to the CMD_ZCHK case in interract
+
+added write_chksum function prototype to fileutils.h
+
+created write_chksum function implementation in fileutils.c
+
+used error checking on sockets from write_list
+
+used connection closing from write_list
+
+added print statement to write_chksum to test that everything up to this point has worked
+
+command IS recognized, but throwing error 425
+not printing the message that would indicate reaching write_chksum
+
+things to check for tomorrow: where is error 425 sent?
diff --git a/tinyftp/connections.c b/tinyftp/connections.c
index 2695618..0dbc7cf 100644
--- a/tinyftp/connections.c
+++ b/tinyftp/connections.c
@@ -88,7 +88,7 @@ int get_type(const char *type) {
  * in commands like "LIST","STOR","RETR"
  */
 int make_client_connection(int sock_fd,int client_port,const char* client_addr) {
-	if(client_port<1) {3
+	if(client_port<1) {
 		send_repl(sock_fd,REPL_425);
 		return -1;
 	}
@@ -607,7 +607,7 @@ int interract(int conn_fd,cmd_opts *opts) {
 		                else {
 				        //check that filename parameter is specified
 				        if(data_buff==NULL | strlen(data_buff)==0 || data_buff[0] == '\0') {
-				                send_rpl(conn_fd, REPL_501);
+				                send_repl(conn_fd, REPL_501);
 				        }
 				        else {
 				                //get socket for client
@@ -619,6 +619,7 @@ int interract(int conn_fd,cmd_opts *opts) {
 				                //close the connection
 					        client_fd = -1;
 		                        }
+				}
 				break;
 			default:
 				send_repl(conn_fd,REPL_502);
-- 
1.8.4.rc3

